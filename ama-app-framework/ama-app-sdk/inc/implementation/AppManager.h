/*
 * Copyright (C) 2016-2017 Neusoft, Inc.
 * All Rights Reserved.
 *
 * The following programs are the sole property of Neusoft Inc.,
 * and contain its proprietary and confidential information.
 */
/// @file AppManager.h
/// @brief contains class AppManager
///
/// Created by zs on 2016/7/13.
/// this file contains the definition of class AppManager
///

#pragma once
#include <memory>
#include <string>
#include <vector>
#include <list>
#include <condition_variable>
#include <ama_types.h>

#include "AppSM.h"
#include "AppSet.h"
#include "v0_1/org/neusoft/AppMgr.hpp"
#include "ama_audioTypes.h"
#include "AnimationPlayerAPI.h"
#include "PLCImplementation.h"
#include "AppPLC.h"
#include "HomePLC.h"
#include "TitlebarAPI.h"
#include "AppShare.h"
#include "ama_enum.h"
#include "AppPower.h"
#include "USBState.h"
#include "Broadcaster.h"
#include "AppAudio.h"
#include "AppCS.h"

struct AppPKGInfo;
extern ::v0_1::org::neusoft::AppMgr::key_value app_key_value;

class AppManager
{
protected:
    AppManager(); // for singleton pattern
    virtual ~AppManager();

private:
    PLCImplementation* appObj;
    bool isUseAnonymousAMPID;
    E_SEAT seatHintOfAnonymousProcess; // tell interested module that which seat this anonymous process should be assumed to be in.
    std::string appLogID;
    std::string appDescription;
    unsigned int ampid; // AMPID
    bool initial;
    // stores the log generated by
    // SDK/APP before CommonAPI is ready.
    // log will be sent to AMGR right
    // after CommonAPI is ready.
    // noted: these log is for profiling
    // purpose only.
    ThreadSafeValueKeeper<std::vector<std::string>> bootLog;
    PlayAnimationNotifyCB playAnimation;
    StopAnimationNotifyCB stopAnimation;
    bool isPlayingStartupAnimation;
    std::mutex mutex4IsPlayingStartupAnimation;
    std::condition_variable CV4IsPlayingStartupAnimation;
    ShutdownNotifyCB shutdownNotify;
    changeOfAudioFocusCB changeOfAudioFocusNotify;
    changeOfAudioFocusCBEx changeOfAudioFocusNotifyEx;
    TitlebarVisibilitySwitchNotifyCB titlebarVisibilitySwitchNotifyCB;
    TitlebarDropDownNotifyCB titlebarDropDownNotifyCB;
    IntentNotifyCB intentNotifyCB;
    AppShareStateChangeNotifyCB appShareStateChangeNotifyCB;
    TitleBarScreenShotCompleteCB titleBarScreenShotCompleteCB;
    AppStateCB appStateCB;
	Broadcaster<SM_handleReqSet> SMReqSetBroadcaster;
    Broadcaster<SM_handleStateChange> SMStateChangeBroadcaster; // the observer of SM item
    Broadcaster<AMGR_handleStateChange> AMGRStateChangeBroadcaster; // the observer of AMGR state
    Broadcaster<void(unsigned int)> IMEFocusChangedBroadcaster;
    Broadcaster<void(unsigned int)> IMEClosedBroadcaster;
    char screenShotList[3][64];//for screen sync
    unsigned int m_CurrAmpidList[3];
    std::vector<unsigned int> m_ActiveAppList;


    //////////////////////////////////////////////////////////////////////////
    // receive broadcast sent by app manager
    void NotifyEarlyInitialize(unsigned int app);
    void NotifyInitialize(unsigned int app, int startArg, bool isVisible, unsigned long long id);
    void NotifyPreHide(unsigned int app, unsigned long long id);
    void NotifyHide(unsigned int app);
    void NotifyResume(unsigned int app, unsigned long long id);
    void NotifyPreShow(unsigned int app, int startArg, unsigned long long id);
    void NotifyShow(unsigned int app);
    void NotifyStop(unsigned int app, const std::string &stopCMD);
    void NotifyInstalledPKGsChanged(unsigned int relatedHome);
    void NotifyPlayStartupAnimation(unsigned int app);
    void NotifyStopStartupAnimation(unsigned int app, unsigned long long id);
    void NotifyAnimationOver(unsigned int app);
    void NotifyShutdown(unsigned int type);
    void NotifyOnChange(uint16_t statMgr_AMPID, std::string key, std::string keyValue);
    void NotifyTitlebarVisibilitySwitch(uint32_t titlebarID, bool visibility, int style);
    void NotifyTitlebarDropDownStateSwitch(uint32_t titlebarID, bool isDropDown, int style);
    void NotifyIntent(unsigned int app, const std::string& action, const std::string& data);
    void NotifyAppShareStateChange(unsigned int app, unsigned int seat, unsigned int state);
    void NotifyAppStateChange(uint32_t app, uint32_t state);
    void NotifyNSMRestartOK();
    void NotifyTitlebarScreenShotComplete(uint32_t titlebarID, int seatid, char * picPath);
    void NotifySMSetRequest(unsigned int requester, unsigned int replyer, const std::string& key, const std::string& value);
    void NotifySMSetDone(unsigned int requester, unsigned int replyer, const std::string& key, const std::string& value);
    void NotifyAMGRSet(unsigned int key, const std::string& value);
    void NotifyIMEFocusChanged(unsigned int app);
    void NotifyIMEClosed(unsigned int app);
    //cj add for screen sync
    bool SetScreenShot(unsigned int ampid);
    void SetCurrentApp(unsigned int currAmpid);
    void AddActiveApp(unsigned int currAmpid);
    void DelActiveApp(unsigned int currAmpid);
    unsigned int GetScreenIDBySeatID(unsigned int seatid);
    void CheckScreenShotNumber(const char* path);


    // good friends of the receivers above
    friend void PreHideNotify(uint32_t ampid, uint64_t id);
    friend void HideNotify(uint32_t ampid);
    friend void StopNotify(uint32_t ampid, const std::string &stopCMD);
    friend void ResumeNotify(uint32_t ampid, uint64_t id);
    friend void PreShowNotify(uint32_t ampid, uint32_t arg, uint64_t id);
    friend void ShowNotify(uint32_t ampid);
    friend void EarlyInitializeNotify(uint32_t ampid);
    friend void InitializeNotify(uint32_t ampid, uint32_t startArg, uint32_t isVisible, uint64_t id);
    friend void InstalledPKGsChangedNotify(uint32_t relatedHome);
    friend void PlayStartupAnimationNotify(uint32_t app);
    friend void StopStartupAnimationNotify(uint32_t app, uint64_t id);
    friend void AnimationOverNotify(uint32_t app);
    friend void PowerStateChangeNotifyEx(uint32_t seat, uint32_t state);
    friend void BroadcastShutdownNotify(uint32_t type);
    friend void BroadcastSMSetRequestNotify(uint32_t ampid_req, uint32_t ampid_reply, const std::string& key, const std::string& value);
    friend void BroadcastSMSetDoneNotify(uint32_t ampid_req, uint32_t ampid_reply, const std::string& key, const std::string& value);
    friend void BroadcastAMGRSetNotify(uint32_t state_type, const std::string& value);
    //friend void SMNotifyOnChange(uint32_t statMgr_AMPID, const std::string& key, const std::string& keyValue );
    friend void ShowPopupNotify(uint32_t popupId, uint32_t reason);
    friend void IMEFocusChangedNotify(uint32_t app);
    friend void IMEClosedNotify(uint32_t app);
    friend void SwitchTitlebarVisibilityNotify(uint32_t titlebarID, uint32_t visibility, uint32_t style);
    friend void SwitchTitlebarDropDownStateNotify(uint32_t titlebarID, uint32_t isDropDown, uint32_t style);
    friend void IntentNotify(uint32_t app, const std::string& action, const std::string& data);
    friend void AppShareStateChangeNotify(uint32_t app, uint32_t seat, uint32_t state);
    friend void AppInstallNotify( const std::string& install_itemid, const std::string& install_type);
    friend void AppStatusChangeNotify(uint32_t app, uint32_t state);
    friend void NSMRestartOKNotify();
public:
    static AppManager* GetInstance();

    void NotifyAudioFocusChanged(uint32_t connectID,uint32_t oldFocusSta, uint32_t newFocusSta, uint32_t applyStreamID);

    /// @name initialization
    /// @{
    void Initialize();
    void NormalInit();
    void AnonymousInit();
    void InitializeLog();
    void InitializeCAPI();
    void InitializeILM();
    void Subscribe();
    void InitializeLSD();
    void BootLog(const std::string& log);
    /// @}

    /// @name getters & setters
    /// @{
    bool IsUseAnonymousAMPID()const;
    void UseAnonymousAMPID(bool usage = true);
    void SetSeatHint(E_SEAT seat); // set seat-hint of an anonymous process
    unsigned int GetAMPID()const;
    void SetAMPID(unsigned int ampid);
    void SetAppLogID(const char* appLogID);
    void SetAppDescription(const char* appDescription);
    void SetNotifyReceiver(PLCImplementation *app);
    void SetPlayAnimationNotifyCB(PlayAnimationNotifyCB f);
    void SetStopAnimationNotifyCB(StopAnimationNotifyCB f);
    void SetAudioFocusChangeNotifyCB(changeOfAudioFocusCB f);
    void SetAudioFocusChangeNotifyCBEx(changeOfAudioFocusCBEx f);
    void SetShutdownNotifyCB(ShutdownNotifyCB f);
    unsigned int SetIMEFocusChangedCB(const std::function<void(unsigned int)>& f);
    unsigned int SetIMEClosedCB(const std::function<void(unsigned int)>& f);
    void SetTitlebarVisibilitySwitchNotifyCB(TitlebarVisibilitySwitchNotifyCB f);
    void SetTitlebarDropDownNotifyCB(TitlebarDropDownNotifyCB f);
    void SetIntentNotifyCB(IntentNotifyCB f);
    void SetAppShareStateNotifyCB(AppShareStateChangeNotifyCB f);
    std::vector<IntentInformation> GetLastSource();
    std::vector<IntentInformation> GetCurrentSource();
    void SetCurrentSource(const std::vector<IntentInformation> &lastSourceSet);

    void SetAppStateNotifyCB(AppStateCB f);
    void AppAwakeRequest(bool isAwake );
    void SetBrightness(int brightness , E_SEAT seatid);
    ::v0_1::org::neusoft::AppMgr::TempMap GetLCDTemperature();
    /// @}

    /// @name TTB SYNC operations
    /// @{
    char *GetScreenShot(int seatid);
    void GetScreenShot(int seatid ,char * picPath);
    unsigned int GetCurrentApp(int seatid);
    void refreshScreenShot(int seatid,char *picPath);
    bool isAlive(unsigned int ampid);
    void KeepAppAlive(bool alive);
    void KeepAppAlive(const std::string& itemID, bool alive);

    void NotifyTitleBarScreenShotCompleteCB(unsigned int seatID);
    void setTitleBarScreenShotCompleteCB(TitleBarScreenShotCompleteCB f);
    TitleBarScreenShotCompleteCB getTitleBarScreenShotCompleteCB();
    /// @}

    /// @name usb operations
    /// @{
    void USBStateControll(ama_USBOperate op);
    /// @}

    void getUSBDevState(int ampid);

    /// @name bpm operations
    /// @{
    /*
     * desc:  set true:  bpm will never kill the app.
     *        set false: bpm will kill the app if needed.
     * param: bool isAlwaysOn  true:add app to alwaysOnList . false:remove app to alwaysOnList
     * return: none
    */
    void requestAlwaysOn(bool isAlwaysOn);
    /// @}

    /// @name rse screen operations
    /// @{
    //cj add for set LCD state control
    /* desc:  set true: rear will keep LCD on until set isStop "false"
     *        set false:rear will close LCD after 30S without any touch
     * param: bool isStop true means disable timer  false means enable timer
     * return: none
    */
    void SetLCDTimerStop(unsigned int ampid, bool isStop);
    void SetLCDPowerOff();
    void SetLCDScreenOn(E_SEAT seat);
    /// @}

    /// @name PLC operations
    /// @{
    void AppendBootLog(const std::string& log);
    void SendBootLog();
    std::string GetLogID(unsigned int ampid);
    void StartHome(unsigned int seat = 0);
    unsigned int GetAMPID(const std::string &itemID);
    unsigned int GetAnonymousAMPID();
    void Intent(const std::string &itemID, const std::string &action, const std::string &data, bool isQuiet);
    void StopApp(unsigned int app);
    void HideApp(unsigned int app);
    void KillApp(unsigned int app);
    void Respond2InitializeApp(unsigned long long id);
    void Respond2ResumeApp(unsigned long long id);
    void Respond2PreShowApp(unsigned long long id);
    void Respond2PreHideApp(unsigned long long id);
    void Respond2SystemShutdown();
    void RequestEarlyInitialize();
    /// @}

    /// @name HMIC operations
    /// @{
    unsigned int GetSurfaceID();
    unsigned int GetUnderLayerSurfaceID();
    unsigned int GetBKGLayerSurfaceID();
    void PlayStartupAnimation(unsigned int app);
    void StopStartupAnimation(unsigned int app);
    void StopSuccess(unsigned int app, unsigned long long id);
    void WaitForAnimationOver();
    void StopAnimation(unsigned int app);
    void Move2BottomLayer();
    void Return2HomeLayer();
    void ForceMainSurfaceConfigured(unsigned int app);
    void LightUpScreenReq(E_SEAT seat);
    /// @}

    /// @name package operations
    /// @{
    std::vector<unsigned int> GetAppList();
    std::vector<AppPKGInfo> GetAppInfoList();
    AppPKGInfo GetAppPKGInfo(unsigned int);
    /// @}

    /// @name SM operations
    /// @{
	void statMgr_GetOrgStates(void);
	void statMgr_SetReq(std::string key, std::string value);
	void statMgr_StateNotify(uint16_t ampid_req,std::string key, std::string value);
	void statMgr_SMReqSet(SM_handleReqSet callback);
	void statMgr_SMChangedNotify(SM_handleStateChange callback);
	void AMGR_changedNotify(AMGR_handleStateChange callback);
    /// @}

    /// @name audio APIs
    /// @{
    void requestAudioDeviceFocus(const ama_connectID_t connectID);
    void releaseAudioDeviceFocus(const ama_connectID_t connectID);
    void setStreamMuteState(const ama_streamID_t streamID,const bool isMute);
    void requestToDuckAudio(const ama_streamID_t streamID,const bool isDunck,const int durationsms,const int volume);
    void requestToUseSpeaker(const ama_seatID_t seatID);
    void abandonToUseSpeaker(const ama_seatID_t seatID);
    ama_AMPID_t reqToGetLastApp(const ama_audioDeviceType_t deviceID);
    bool checkIsVolumeTypeActive(const int volumeType);
    /// @}

    /// @name set APIs
    /// @{
    void requestToSet(uint16_t ampid,int key,int value);
	std::string AMGRGetState(uint16_t ampid,int state_type);
    /// @}

    /// @name app UI control APIs
    /// @{
    void ExpandTitlebar(const unsigned int titlebar);
    void ShrinkTitlebar(const unsigned int titlebar);
    void SetTitlebarVisibility(unsigned int requester, bool visibility, int style);
    bool IsTitlebarVisible()const;
    void DropDownTitlebar(bool isDropDown, int style);
    bool IsTitlebarDropDown();
    void EnableTouch(bool enable = true);
    void SetUnderLayerCenter(bool isCenter = true);
    bool IsUnderLayerCenter();
    std::vector<E_SEAT> GetScreens();
    void GetScreenSize(E_SEAT seat, unsigned int& width, unsigned int& height);
    void RemoveFromZOrder(unsigned int app);
    void AddExtraSurface(unsigned int surface, unsigned int layer);
    /// @}

    /// @name titlebar APIs
    /// @{
    void MarkTitlebarDropDownState(bool isDropDown);
    /// @}

    /// @name app-share APIs
    /// @{
    void StartShareApp(const unsigned int app, unsigned int seat, bool isMove);
    void StopShareApp(const unsigned int app, E_SEAT seat);
    unsigned int GetCurrentShare(const unsigned int seat)const;
    std::vector<unsigned int> GetSourceSurfaces()const;
    bool GetWorkingLayers(std::vector<unsigned int> & workingLayers)const;
    /// @}

    /// @name LSD
    /// @{
    static bool InitLSD();
    static void OnLSDReboot();
    /// @}

    /// @name active app's status
    /// @{
    std::vector<AMPID> GetActiveAppList()const;
    AppStatus GetAppState(AMPID app);
    /// @}
};
