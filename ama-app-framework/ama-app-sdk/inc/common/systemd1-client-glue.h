/*
 * Copyright (C) 2016-2017 Neusoft, Inc.
 * All Rights Reserved.
 *
 * The following programs are the sole property of Neusoft Inc.,
 * and contain its proprietary and confidential information.
 */

/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__Systemd1_client_glue_h__PROXY_MARSHAL_H
#define __dbusxx__Systemd1_client_glue_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace DBus {

class Peer_proxy
: public ::DBus::InterfaceProxy
{
public:

    Peer_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.DBus.Peer")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Ping()
    {
        ::DBus::CallMessage call;
        call.member("Ping");
        ::DBus::Message ret = invoke_method (call);
    }

    std::string GetMachineId()
    {
        ::DBus::CallMessage call;
        call.member("GetMachineId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } }
namespace org {
namespace freedesktop {
namespace systemd1 {

class Manager_proxy
: public ::DBus::InterfaceProxy
{
public:

    Manager_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.systemd1.Manager")
    {
        connect_signal(Manager_proxy, UnitNew, _UnitNew_stub);
        connect_signal(Manager_proxy, UnitRemoved, _UnitRemoved_stub);
        connect_signal(Manager_proxy, JobNew, _JobNew_stub);
        connect_signal(Manager_proxy, JobRemoved, _JobRemoved_stub);
        connect_signal(Manager_proxy, StartupFinished, _StartupFinished_stub);
        connect_signal(Manager_proxy, UnitFilesChanged, _UnitFilesChanged_stub);
        connect_signal(Manager_proxy, Reloading, _Reloading_stub);
    }

public:

    /* properties exported by this interface */
        const std::string Version() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "Version";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::string Features() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "Features";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::string Virtualization() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "Virtualization";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::string Architecture() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "Architecture";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::string Tainted() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "Tainted";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t FirmwareTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "FirmwareTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t FirmwareTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "FirmwareTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t LoaderTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "LoaderTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t LoaderTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "LoaderTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t KernelTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "KernelTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t KernelTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "KernelTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t InitRDTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "InitRDTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t InitRDTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "InitRDTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t UserspaceTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "UserspaceTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t UserspaceTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "UserspaceTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t FinishTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "FinishTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t FinishTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "FinishTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t SecurityStartTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "SecurityStartTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t SecurityStartTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "SecurityStartTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t SecurityFinishTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "SecurityFinishTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t SecurityFinishTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "SecurityFinishTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t GeneratorsStartTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "GeneratorsStartTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t GeneratorsStartTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "GeneratorsStartTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t GeneratorsFinishTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "GeneratorsFinishTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t GeneratorsFinishTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "GeneratorsFinishTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t UnitsLoadStartTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "UnitsLoadStartTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t UnitsLoadStartTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "UnitsLoadStartTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t UnitsLoadFinishTimestamp() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "UnitsLoadFinishTimestamp";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t UnitsLoadFinishTimestampMonotonic() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "UnitsLoadFinishTimestampMonotonic";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::string LogLevel() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "LogLevel";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        void LogLevel( const std::string & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "LogLevel";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
        const std::string LogTarget() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "LogTarget";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        void LogTarget( const std::string & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "LogTarget";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
        const uint32_t NNames() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "NNames";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint32_t NFailedUnits() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "NFailedUnits";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint32_t NJobs() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "NJobs";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint32_t NInstalledJobs() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "NInstalledJobs";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint32_t NFailedJobs() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "NFailedJobs";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const double Progress() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "Progress";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::vector< std::string > Environment() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "Environment";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const bool ConfirmSpawn() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "ConfirmSpawn";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const bool ShowStatus() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "ShowStatus";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::vector< std::string > UnitPath() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "UnitPath";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::string DefaultStandardOutput() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "DefaultStandardOutput";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::string DefaultStandardError() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "DefaultStandardError";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const uint64_t RuntimeWatchdogUSec() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "RuntimeWatchdogUSec";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        void RuntimeWatchdogUSec( const uint64_t & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "RuntimeWatchdogUSec";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
        const uint64_t ShutdownWatchdogUSec() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "ShutdownWatchdogUSec";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        void ShutdownWatchdogUSec( const uint64_t & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "ShutdownWatchdogUSec";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
        const std::string ControlGroup() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "ControlGroup";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::string SystemState() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.systemd1.Manager";
            const std::string property_name  = "SystemState";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Path GetUnit(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("GetUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path GetUnitByPID(const uint32_t& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("GetUnitByPID");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path LoadUnit(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("LoadUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path StartUnit(const std::string& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("StartUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path StartUnitReplace(const std::string& argin0, const std::string& argin1, const std::string& argin2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        call.member("StartUnitReplace");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path StopUnit(const std::string& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("StopUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path ReloadUnit(const std::string& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("ReloadUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path RestartUnit(const std::string& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("RestartUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path TryRestartUnit(const std::string& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("TryRestartUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path ReloadOrRestartUnit(const std::string& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("ReloadOrRestartUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path ReloadOrTryRestartUnit(const std::string& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("ReloadOrTryRestartUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    void KillUnit(const std::string& argin0, const std::string& argin1, const int32_t& argin2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        call.member("KillUnit");
        ::DBus::Message ret = invoke_method (call);
    }

    void ResetFailedUnit(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("ResetFailedUnit");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetUnitProperties(const std::string& argin0, const bool& argin1, const std::vector< ::DBus::Struct< std::string, ::DBus::Variant > >& argin2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        call.member("SetUnitProperties");
        ::DBus::Message ret = invoke_method (call);
    }

    ::DBus::Path StartTransientUnit(const std::string& argin0, const std::string& argin1, const std::vector< ::DBus::Struct< std::string, ::DBus::Variant > >& argin2, const std::vector< ::DBus::Struct< std::string, std::vector< ::DBus::Struct< std::string, ::DBus::Variant > > > >& argin3)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        wi << argin3;
        call.member("StartTransientUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path GetJob(const uint32_t& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("GetJob");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    void CancelJob(const uint32_t& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("CancelJob");
        ::DBus::Message ret = invoke_method (call);
    }

    void ClearJobs()
    {
        ::DBus::CallMessage call;
        call.member("ClearJobs");
        ::DBus::Message ret = invoke_method (call);
    }

    void ResetFailed()
    {
        ::DBus::CallMessage call;
        call.member("ResetFailed");
        ::DBus::Message ret = invoke_method (call);
    }

    std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > ListUnits()
    {
        ::DBus::CallMessage call;
        call.member("ListUnits");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > ListUnitsFiltered(const std::vector< std::string >& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("ListUnitsFiltered");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< uint32_t, std::string, std::string, std::string, ::DBus::Path, ::DBus::Path > > ListJobs()
    {
        ::DBus::CallMessage call;
        call.member("ListJobs");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< uint32_t, std::string, std::string, std::string, ::DBus::Path, ::DBus::Path > > argout;
        ri >> argout;
        return argout;
    }

    void Subscribe()
    {
        ::DBus::CallMessage call;
        call.member("Subscribe");
        ::DBus::Message ret = invoke_method (call);
    }

    void Unsubscribe()
    {
        ::DBus::CallMessage call;
        call.member("Unsubscribe");
        ::DBus::Message ret = invoke_method (call);
    }

    std::string Dump()
    {
        ::DBus::CallMessage call;
        call.member("Dump");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path CreateSnapshot(const std::string& argin0, const bool& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("CreateSnapshot");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    void RemoveSnapshot(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("RemoveSnapshot");
        ::DBus::Message ret = invoke_method (call);
    }

    void Reload()
    {
        ::DBus::CallMessage call;
        call.member("Reload");
        ::DBus::Message ret = invoke_method (call);
    }

    void Reexecute()
    {
        ::DBus::CallMessage call;
        call.member("Reexecute");
        ::DBus::Message ret = invoke_method (call);
    }

    void Exit()
    {
        ::DBus::CallMessage call;
        call.member("Exit");
        ::DBus::Message ret = invoke_method (call);
    }

    void Reboot()
    {
        ::DBus::CallMessage call;
        call.member("Reboot");
        ::DBus::Message ret = invoke_method (call);
    }

    void PowerOff()
    {
        ::DBus::CallMessage call;
        call.member("PowerOff");
        ::DBus::Message ret = invoke_method (call);
    }

    void Halt()
    {
        ::DBus::CallMessage call;
        call.member("Halt");
        ::DBus::Message ret = invoke_method (call);
    }

    void KExec()
    {
        ::DBus::CallMessage call;
        call.member("KExec");
        ::DBus::Message ret = invoke_method (call);
    }

    void SwitchRoot(const std::string& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("SwitchRoot");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetEnvironment(const std::vector< std::string >& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("SetEnvironment");
        ::DBus::Message ret = invoke_method (call);
    }

    void UnsetEnvironment(const std::vector< std::string >& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("UnsetEnvironment");
        ::DBus::Message ret = invoke_method (call);
    }

    void UnsetAndSetEnvironment(const std::vector< std::string >& argin0, const std::vector< std::string >& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("UnsetAndSetEnvironment");
        ::DBus::Message ret = invoke_method (call);
    }

    std::vector< ::DBus::Struct< std::string, std::string > > ListUnitFiles()
    {
        ::DBus::CallMessage call;
        call.member("ListUnitFiles");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string > > argout;
        ri >> argout;
        return argout;
    }

    std::string GetUnitFileState(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("GetUnitFileState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    void EnableUnitFiles(const std::vector< std::string >& argin0, const bool& argin1, const bool& argin2, bool& argout0, std::vector< ::DBus::Struct< std::string, std::string, std::string > >& argout1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        call.member("EnableUnitFiles");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> argout0;
        ri >> argout1;
    }

    std::vector< ::DBus::Struct< std::string, std::string, std::string > > DisableUnitFiles(const std::vector< std::string >& argin0, const bool& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("DisableUnitFiles");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string, std::string > > argout;
        ri >> argout;
        return argout;
    }

    void ReenableUnitFiles(const std::vector< std::string >& argin0, const bool& argin1, const bool& argin2, bool& argout0, std::vector< ::DBus::Struct< std::string, std::string, std::string > >& argout1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        call.member("ReenableUnitFiles");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> argout0;
        ri >> argout1;
    }

    std::vector< ::DBus::Struct< std::string, std::string, std::string > > LinkUnitFiles(const std::vector< std::string >& argin0, const bool& argin1, const bool& argin2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        call.member("LinkUnitFiles");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string, std::string > > argout;
        ri >> argout;
        return argout;
    }

    void PresetUnitFiles(const std::vector< std::string >& argin0, const bool& argin1, const bool& argin2, bool& argout0, std::vector< ::DBus::Struct< std::string, std::string, std::string > >& argout1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        call.member("PresetUnitFiles");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> argout0;
        ri >> argout1;
    }

    void PresetUnitFilesWithMode(const std::vector< std::string >& argin0, const std::string& argin1, const bool& argin2, const bool& argin3, bool& argout0, std::vector< ::DBus::Struct< std::string, std::string, std::string > >& argout1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        wi << argin3;
        call.member("PresetUnitFilesWithMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> argout0;
        ri >> argout1;
    }

    std::vector< ::DBus::Struct< std::string, std::string, std::string > > MaskUnitFiles(const std::vector< std::string >& argin0, const bool& argin1, const bool& argin2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        call.member("MaskUnitFiles");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string, std::string > > argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< std::string, std::string, std::string > > UnmaskUnitFiles(const std::vector< std::string >& argin0, const bool& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("UnmaskUnitFiles");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string, std::string > > argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< std::string, std::string, std::string > > SetDefaultTarget(const std::string& argin0, const bool& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("SetDefaultTarget");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string, std::string > > argout;
        ri >> argout;
        return argout;
    }

    std::string GetDefaultTarget()
    {
        ::DBus::CallMessage call;
        call.member("GetDefaultTarget");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< std::string, std::string, std::string > > PresetAllUnitFiles(const std::string& argin0, const bool& argin1, const bool& argin2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        call.member("PresetAllUnitFiles");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string, std::string > > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void UnitNew(const std::string& argin0, const ::DBus::Path& argin1) = 0;
    virtual void UnitRemoved(const std::string& argin0, const ::DBus::Path& argin1) = 0;
    virtual void JobNew(const uint32_t& argin0, const ::DBus::Path& argin1, const std::string& argin2) = 0;
    virtual void JobRemoved(const uint32_t& argin0, const ::DBus::Path& argin1, const std::string& argin2, const std::string& argin3) = 0;
    virtual void StartupFinished(const uint64_t& argin0, const uint64_t& argin1, const uint64_t& argin2, const uint64_t& argin3, const uint64_t& argin4, const uint64_t& argin5) = 0;
    virtual void UnitFilesChanged() = 0;
    virtual void Reloading(const bool& argin0) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _UnitNew_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        ::DBus::Path arg1;
        ri >> arg1;
        UnitNew(arg0, arg1);
    }
    void _UnitRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        ::DBus::Path arg1;
        ri >> arg1;
        UnitRemoved(arg0, arg1);
    }
    void _JobNew_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t arg0;
        ri >> arg0;
        ::DBus::Path arg1;
        ri >> arg1;
        std::string arg2;
        ri >> arg2;
        JobNew(arg0, arg1, arg2);
    }
    void _JobRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t arg0;
        ri >> arg0;
        ::DBus::Path arg1;
        ri >> arg1;
        std::string arg2;
        ri >> arg2;
        std::string arg3;
        ri >> arg3;
        JobRemoved(arg0, arg1, arg2, arg3);
    }
    void _StartupFinished_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t arg0;
        ri >> arg0;
        uint64_t arg1;
        ri >> arg1;
        uint64_t arg2;
        ri >> arg2;
        uint64_t arg3;
        ri >> arg3;
        uint64_t arg4;
        ri >> arg4;
        uint64_t arg5;
        ri >> arg5;
        StartupFinished(arg0, arg1, arg2, arg3, arg4, arg5);
    }
    void _UnitFilesChanged_stub(const ::DBus::SignalMessage &sig)
    {
        UnitFilesChanged();
    }
    void _Reloading_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool arg0;
        ri >> arg0;
        Reloading(arg0);
    }
};

} } }
#endif //__dbusxx__Systemd1_client_glue_h__PROXY_MARSHAL_H
