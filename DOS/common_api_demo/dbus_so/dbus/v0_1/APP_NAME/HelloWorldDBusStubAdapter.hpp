/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef APP_NAME_Hello_World_DBUS_STUB_ADAPTER_HPP_
#define APP_NAME_Hello_World_DBUS_STUB_ADAPTER_HPP_

#include <v0_1/APP_NAME/HelloWorldStub.hpp>
#include "v0_1/APP_NAME/HelloWorldDBusDeployment.hpp"        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0_1 {
namespace APP_NAME {

typedef CommonAPI::DBus::DBusStubAdapterHelper<HelloWorldStub> HelloWorldDBusStubAdapterHelper;

class HelloWorldDBusStubAdapterInternal
    : public virtual HelloWorldStubAdapter,
      public HelloWorldDBusStubAdapterHelper
{
public:
    HelloWorldDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~HelloWorldDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();

    /**
     * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
     */
    void fireXAttributeChanged(const int32_t& value);

    /**
     * description: selective的广播，只有一个输出参数。注意，这里的输出是针对服务端来说的，也就是说，从服务端输出到客户端。从通常意义来讲，这是个输入参数。下同
     */
    void fireReplySelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_name);
    void sendReplySelective(const std::string &_name, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForreplySelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromreplySelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForReplySelective();
    /**
     * description: 一个标准的广播接口，带有一个参数
     */
    void fireYellEvent(const std::string& name);


    const HelloWorldDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0_1::APP_NAME::HelloWorldStub,
        CommonAPI::Version
        > getHelloWorldInterfaceVersionStubDispatcher;

/**
 * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0_1::APP_NAME::HelloWorldStub,
        int32_t                
        > getXAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v0_1::APP_NAME::HelloWorldStub,
        int32_t                    
        > setXAttributeStubDispatcher;


/**
 * description: 这是一个标准的函数接口，拥有一个输入参数，一个输出参数
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0_1::APP_NAME::HelloWorldStub,
    std::tuple<std::string>,
    std::tuple<std::string>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > sayHelloStubDispatcher;
/**
 * description: fireAndForget的函数，只有一个输入参数  note tell为函数名
 */

static CommonAPI::DBus::DBusMethodStubDispatcher<
    ::v0_1::APP_NAME::HelloWorldStub,
    std::tuple<std::string>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    > tellStubDispatcher;


static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v0_1::APP_NAME::HelloWorldStub,
    HelloWorldStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > subscribeReplySelectiveStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v0_1::APP_NAME::HelloWorldStub,
    HelloWorldStubAdapter,
 std::tuple<>,
    std::tuple<>
    > unsubscribeReplySelectiveStubDispatcher;


 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    HelloWorldDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class HelloWorldDBusStubAdapter
    : public HelloWorldDBusStubAdapterInternal,
      public std::enable_shared_from_this<HelloWorldDBusStubAdapter> {
public:
    HelloWorldDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          HelloWorldDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace APP_NAME
} // namespace v0_1

#endif // APP_NAME_Hello_World_DBUS_STUB_ADAPTER_HPP_
