/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef APP_NAME_Hello_World_DBUS_PROXY_HPP_
#define APP_NAME_Hello_World_DBUS_PROXY_HPP_

#include <v0_1/APP_NAME/HelloWorldProxyBase.hpp>
#include "v0_1/APP_NAME/HelloWorldDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/DBus/DBusSelectiveEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0_1 {
namespace APP_NAME {

class HelloWorldDBusProxy
    : virtual public HelloWorldProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    HelloWorldDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~HelloWorldDBusProxy() { }

    virtual XAttribute& getXAttribute();

    virtual ReplySelectiveEvent& getReplySelectiveEvent();
    virtual YellEvent& getYellEvent();

    /**
     * description: 这是一个标准的函数接口，拥有一个输入参数，一个输出参数
     */
    virtual void sayHello(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> sayHelloAsync(const std::string &_name, SayHelloAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: fireAndForget的函数，只有一个输入参数  note tell为函数名
     */
    virtual void tell(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
    
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<XAttribute>> x_;

    CommonAPI::DBus::DBusSelectiveEvent<ReplySelectiveEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> replySelective_;
    CommonAPI::DBus::DBusEvent<YellEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> yell_;

};

} // namespace APP_NAME
} // namespace v0_1

#endif // APP_NAME_Hello_World_DBUS_PROXY_HPP_

