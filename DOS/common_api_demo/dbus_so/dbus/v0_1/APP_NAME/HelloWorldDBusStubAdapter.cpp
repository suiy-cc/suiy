/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v0_1/APP_NAME/HelloWorld.hpp>
#include <v0_1/APP_NAME/HelloWorldDBusStubAdapter.hpp>

namespace v0_1 {
namespace APP_NAME {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createHelloWorldDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<HelloWorldDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerHelloWorldDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	HelloWorld::getInterface(), &createHelloWorldDBusStubAdapter);
}

HelloWorldDBusStubAdapterInternal::~HelloWorldDBusStubAdapterInternal() {
    deactivateManagedInstances();
    HelloWorldDBusStubAdapterHelper::deinit();
}

void HelloWorldDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* HelloWorldDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getXAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setXAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onXAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: selective的广播，只有一个输出参数。注意，这里的输出是针对服务端来说的，也就是说，从服务端输出到客户端。从通常意义来讲，这是个输入参数。下同
         */
        "<signal name=\"reply\">\n"
            "<arg name=\"name\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: 一个标准的广播接口，带有一个参数
         */
        "<signal name=\"yell\">\n"
            "<arg name=\"name\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: 这是一个标准的函数接口，拥有一个输入参数，一个输出参数
         */
        "<method name=\"sayHello\">\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_message\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: fireAndForget的函数，只有一个输入参数  note tell为函数名
         */
        "<method name=\"tell\">\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0_1::APP_NAME::HelloWorldStub,
        CommonAPI::Version
        > HelloWorldDBusStubAdapterInternal::getHelloWorldInterfaceVersionStubDispatcher(&HelloWorldStub::getInterfaceVersion, "uu");

/**
 * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0_1::APP_NAME::HelloWorldStub,
        int32_t
        > HelloWorldDBusStubAdapterInternal::getXAttributeStubDispatcher(
            &::v0_1::APP_NAME::HelloWorldStub::getXAttribute
            , "i"
            );
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v0_1::APP_NAME::HelloWorldStub,
        int32_t
        > HelloWorldDBusStubAdapterInternal::setXAttributeStubDispatcher(
                &::v0_1::APP_NAME::HelloWorldStub::getXAttribute,
                &HelloWorldStubRemoteEvent::onRemoteSetXAttribute,
                &HelloWorldStubRemoteEvent::onRemoteXAttributeChanged
                ,&HelloWorldStubAdapter::fireXAttributeChanged
                ,"i"
                );



/**
 * description: 这是一个标准的函数接口，拥有一个输入参数，一个输出参数
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0_1::APP_NAME::HelloWorldStub,
    std::tuple<std::string>,
    std::tuple<std::string>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > HelloWorldDBusStubAdapterInternal::sayHelloStubDispatcher(
    &HelloWorldStub::sayHello, "s",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)));

/**
 * description: fireAndForget的函数，只有一个输入参数  note tell为函数名
 */
CommonAPI::DBus::DBusMethodStubDispatcher<
    HelloWorldStub,
    std::tuple<std::string>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > HelloWorldDBusStubAdapterInternal::tellStubDispatcher(&HelloWorldStub::tell,
    std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)));


/**
 * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
 */
void HelloWorldDBusStubAdapterInternal::fireXAttributeChanged(const int32_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int32_t
    >>
        ::sendSignal(
            *this,
            "onXAttributeChanged",
            "i",
            value
    
    );
}

/**
 * description: selective的广播，只有一个输出参数。注意，这里的输出是针对服务端来说的，也就是说，从服务端输出到客户端。从通常意义来讲，这是个输入参数。下同
 */
CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v0_1::APP_NAME::HelloWorldStub,
    HelloWorldStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > HelloWorldDBusStubAdapterInternal::subscribeReplySelectiveStubDispatcher(&HelloWorldStubAdapter::subscribeForreplySelective, "b");

CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v0_1::APP_NAME::HelloWorldStub,
    HelloWorldStubAdapter,
    std::tuple<>,
    std::tuple<>
    > HelloWorldDBusStubAdapterInternal::unsubscribeReplySelectiveStubDispatcher(&HelloWorldStubAdapter::unsubscribeFromreplySelective, "");

void HelloWorldDBusStubAdapterInternal::fireReplySelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_name) {
    std::shared_ptr<CommonAPI::DBus::DBusClientId> dbusClient = std::dynamic_pointer_cast<CommonAPI::DBus::DBusClientId, CommonAPI::ClientId>(_client);

    if(dbusClient)
    {
        CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>
        >>::sendSignal(
                dbusClient->getDBusId(),
                *this,
                "reply",
                "s",
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
        );
    }
}

void HelloWorldDBusStubAdapterInternal::sendReplySelective(const std::string &_name, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    std::shared_ptr<CommonAPI::ClientIdList> actualReceiverList = _receivers;

    if (!_receivers)
        actualReceiverList = subscribersForReplySelective_;

    for (auto clientIdIterator = actualReceiverList->cbegin(); clientIdIterator != actualReceiverList->cend(); clientIdIterator++) {
        if (!_receivers || subscribersForReplySelective_->find(*clientIdIterator) != subscribersForReplySelective_->end()) {
            fireReplySelective(*clientIdIterator, _name);
        }
    }
}

void HelloWorldDBusStubAdapterInternal::subscribeForreplySelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
    bool ok = HelloWorldDBusStubAdapterHelper::stub_->onReplySelectiveSubscriptionRequested(clientId);
    if (ok) {
        subscribersForReplySelective_->insert(clientId);
        HelloWorldDBusStubAdapterHelper::stub_->onReplySelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::SUBSCRIBED);
        success = true;
    } else {
        success = false;
    }
}

void HelloWorldDBusStubAdapterInternal::unsubscribeFromreplySelective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    subscribersForReplySelective_->erase(clientId);
    HelloWorldDBusStubAdapterHelper::stub_->onReplySelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::UNSUBSCRIBED);
}

std::shared_ptr<CommonAPI::ClientIdList> const HelloWorldDBusStubAdapterInternal::getSubscribersForReplySelective() {
    return subscribersForReplySelective_;
}
/**
 * description: 一个标准的广播接口，带有一个参数
 */
void HelloWorldDBusStubAdapterInternal::fireYellEvent(const std::string& name) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>
    >>::sendSignal(
            *this,
            "yell",
            "s",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
    );
}


const HelloWorldDBusStubAdapterHelper::StubDispatcherTable& HelloWorldDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& HelloWorldDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

HelloWorldDBusStubAdapterInternal::HelloWorldDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      HelloWorldDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<HelloWorldStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
             */
            { { "getXAttribute", "" }, &APP_NAME::HelloWorldDBusStubAdapterInternal::getXAttributeStubDispatcher }
            , { { "setXAttribute", "i" }, &APP_NAME::HelloWorldDBusStubAdapterInternal::setXAttributeStubDispatcher }
            ,
            /**
             * description: 这是一个标准的函数接口，拥有一个输入参数，一个输出参数
             */
            { { "sayHello", "s" }, &APP_NAME::HelloWorldDBusStubAdapterInternal::sayHelloStubDispatcher },
            /**
             * description: fireAndForget的函数，只有一个输入参数  note tell为函数名
             */
            { { "tell", "s" }, &APP_NAME::HelloWorldDBusStubAdapterInternal::tellStubDispatcher }
            ,
            { { "subscribeForreplySelective", "" }, &APP_NAME::HelloWorldDBusStubAdapterInternal::subscribeReplySelectiveStubDispatcher }
            ,
            { { "unsubscribeFromreplySelective", "" }, &APP_NAME::HelloWorldDBusStubAdapterInternal::unsubscribeReplySelectiveStubDispatcher }
            }),
        stubAttributeTable_() {
    subscribersForReplySelective_ = std::make_shared<CommonAPI::ClientIdList>();

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &APP_NAME::HelloWorldDBusStubAdapterInternal::getHelloWorldInterfaceVersionStubDispatcher });
}

const bool HelloWorldDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace APP_NAME
} // namespace v0_1
