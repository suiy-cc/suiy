/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef APP_NAME_Hello_World_PROXY_HPP_
#define APP_NAME_Hello_World_PROXY_HPP_

#include <v0_1/APP_NAME/HelloWorldProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0_1 {
namespace APP_NAME {

template <typename ... _AttributeExtensions>
class HelloWorldProxy
    : virtual public HelloWorld, 
      virtual public HelloWorldProxyBase,
      public _AttributeExtensions... {
public:
    HelloWorldProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~HelloWorldProxy();

    typedef HelloWorld InterfaceType;


    /**
     * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
     */
    /**
     * Returns the wrapper class that provides access to the attribute x.
     */
    virtual XAttribute& getXAttribute() {
        return delegate_->getXAttribute();
    }

    /**
     * description: selective的广播，只有一个输出参数。注意，这里的输出是针对服务端来说的，也就是说，从服务端输出到客户端。从通常意义来讲，这是个输入参数。下同
     */
    /**
     * Returns the wrapper class that provides access to the broadcast reply.
     */
    virtual ReplySelectiveEvent& getReplySelectiveEvent() {
        return delegate_->getReplySelectiveEvent();
    }
    /**
     * description: 一个标准的广播接口，带有一个参数
     */
    /**
     * Returns the wrapper class that provides access to the broadcast yell.
     */
    virtual YellEvent& getYellEvent() {
        return delegate_->getYellEvent();
    }

    /**
     * description: 这是一个标准的函数接口，拥有一个输入参数，一个输出参数
     * Calls sayHello with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void sayHello(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls sayHello with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> sayHelloAsync(const std::string &_name, SayHelloAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: fireAndForget的函数，只有一个输入参数  note tell为函数名
     * Calls tell with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void tell(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<HelloWorldProxyBase> delegate_;
};

typedef HelloWorldProxy<> HelloWorldProxyDefault;

namespace HelloWorldExtensions {
    /**
     * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
     */
    template <template <typename > class _ExtensionType>
    class XAttributeExtension {
     public:
        typedef _ExtensionType<HelloWorldProxyBase::XAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<HelloWorldProxyBase::XAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        XAttributeExtension() {}
    #endif
    
        XAttributeExtension(HelloWorldProxyBase& proxy): attributeExtension_(proxy.getXAttribute()) {
        }
    
        inline extension_type& getXAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace HelloWorldExtensions

//
// HelloWorldProxy Implementation
//
template <typename ... _AttributeExtensions>
HelloWorldProxy<_AttributeExtensions...>::HelloWorldProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<HelloWorldProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<HelloWorldProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
HelloWorldProxy<_AttributeExtensions...>::~HelloWorldProxy() {
}

/**
 * description: 这是一个标准的函数接口，拥有一个输入参数，一个输出参数
 */
template <typename ... _AttributeExtensions>
void HelloWorldProxy<_AttributeExtensions...>::sayHello(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info) {
    delegate_->sayHello(_name, _internalCallStatus, _message, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> HelloWorldProxy<_AttributeExtensions...>::sayHelloAsync(const std::string &_name, SayHelloAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->sayHelloAsync(_name, _callback, _info);
}
/**
 * description: fireAndForget的函数，只有一个输入参数  note tell为函数名
 */
template <typename ... _AttributeExtensions>
void HelloWorldProxy<_AttributeExtensions...>::tell(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->tell(_name, _internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &HelloWorldProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool HelloWorldProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool HelloWorldProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& HelloWorldProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& HelloWorldProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace APP_NAME
} // namespace v0_1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0_1::APP_NAME::HelloWorldProxy,
    _AttributeExtension> {
    typedef typename ::v0_1::APP_NAME::HelloWorldProxy<
            ::v0_1::APP_NAME::HelloWorldExtensions::XAttributeExtension<_AttributeExtension>
    > class_t;
};
}

#endif // APP_NAME_Hello_World_PROXY_HPP_
