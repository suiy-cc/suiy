/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef APP_NAME_Hello_World_STUB_HPP_
#define APP_NAME_Hello_World_STUB_HPP_

#include <functional>




#include <v0_1/APP_NAME/HelloWorld.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0_1 {
namespace APP_NAME {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service HelloWorld. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class HelloWorldStubAdapter
    : virtual public CommonAPI::StubAdapter, 
      public HelloWorld {
 public:
    ///Notifies all remote listeners about a change of value of the attribute x.
    virtual void fireXAttributeChanged(const int32_t& x) = 0;

    /**
     * Sends a selective broadcast event for reply. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireReplySelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_name) = 0;
    virtual void sendReplySelective(const std::string &_name, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForreplySelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromreplySelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForReplySelective() = 0;
    /**
     * Sends a broadcast event for yell. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireYellEvent(const std::string &_name) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForReplySelective_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for HelloWorld.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class HelloWorldStubRemoteEvent
{
public:
    virtual ~HelloWorldStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute x
    virtual bool onRemoteSetXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t x) = 0;
    /// Action callback for remote set requests on the attribute x
    virtual void onRemoteXAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service HelloWorld to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class HelloWorldStub
    : public virtual CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>
{
public:
    typedef std::function<void (std::string _message)>sayHelloReply_t;

    virtual ~HelloWorldStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
     */
    /// Provides getter access to the attribute x
    virtual const int32_t &getXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: 这是一个标准的函数接口，拥有一个输入参数，一个输出参数
     */
    /// This is the method that will be called on remote calls on the method sayHello.
    virtual void sayHello(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, sayHelloReply_t _reply) = 0;
    /**
     * description: fireAndForget的函数，只有一个输入参数  note tell为函数名
     */
    /// This is the method that will be called on remote calls on the method tell.
    virtual void tell(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name) = 0;
    /**
     * description: selective的广播，只有一个输出参数。注意，这里的输出是针对服务端来说的，也就是说，从服务端输出到客户端。从通常意义来讲，这是个输入参数。下同
     */
    /**
     * Sends a selective broadcast event for reply to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireReplySelective(const std::string &_name, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retreives the list of all subscribed clients for reply
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForReplySelective() = 0;
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onReplySelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions 
    virtual bool onReplySelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: 一个标准的广播接口，带有一个参数
     */
    /// Sends a broadcast event for yell.
    virtual void fireYellEvent(const std::string &_name) = 0;

    using CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef HelloWorldStubRemoteEvent RemoteEventType;
    typedef HelloWorld StubInterface;
};

} // namespace APP_NAME
} // namespace v0_1

#endif // APP_NAME_Hello_World_STUB_HPP_
