/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef APP_NAME_Hello_World_STUB_DEFAULT_HPP_
#define APP_NAME_Hello_World_STUB_DEFAULT_HPP_


#include <v0_1/APP_NAME/HelloWorldStub.hpp>
#include <sstream>

namespace v0_1 {
namespace APP_NAME {

/**
 * Provides a default implementation for HelloWorldStubRemoteEvent and
 * HelloWorldStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class HelloWorldStubDefault
    : public virtual HelloWorldStub {
public:
    HelloWorldStubDefault();

    HelloWorldStubRemoteEvent* initStubAdapter(const std::shared_ptr<HelloWorldStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const int32_t& getXAttribute();
    virtual const int32_t& getXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setXAttribute(int32_t _value);
    virtual void setXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value);

    /**
     * description: 这是一个标准的函数接口，拥有一个输入参数，一个输出参数
     */
    virtual void sayHello(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, sayHelloReply_t _reply);
    /**
     * description: fireAndForget的函数，只有一个输入参数  note tell为函数名
     */
    virtual void tell(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name);

/**
 * description: selective的广播，只有一个输出参数。注意，这里的输出是针对服务端来说的，也就是说，从服务端输出到客户端。从通常意义来讲，这是个输入参数。下同
 */
virtual void fireReplySelective(const std::string &_name, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForReplySelective();
/// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
virtual void onReplySelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event);
/// Hook method for reacting accepting or denying new subscriptions 
virtual bool onReplySelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client);
/**
 * description: 一个标准的广播接口，带有一个参数
 */
virtual void fireYellEvent(const std::string &_name);


protected:
    /**
     * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
     */
    virtual bool trySetXAttribute(int32_t _value);
    virtual bool validateXAttributeRequestedValue(const int32_t &_value);
    virtual void onRemoteXAttributeChanged();
    class RemoteEventHandler: public virtual HelloWorldStubRemoteEvent {
    public:
        RemoteEventHandler(HelloWorldStubDefault *_defaultStub);

        /**
         * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
         */
        virtual bool onRemoteSetXAttribute(int32_t _value);
        virtual bool onRemoteSetXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value);
        virtual void onRemoteXAttributeChanged();


    private:
        HelloWorldStubDefault *defaultStub_;
    };
private:
    HelloWorldStubDefault::RemoteEventHandler remoteEventHandler_;

    /**
     * description: 定义一个私有成员变量和一组对应的Get（客户端）/ Set（服务端）函数
     */
    int32_t xAttributeValue_;

    CommonAPI::Version interfaceVersion_;
};

} // namespace APP_NAME
} // namespace v0_1

#endif // APP_NAME_Hello_World_STUB_DEFAULT
